{"version":3,"sources":["Hooks.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Hooks","useState","firstName","setFirstName","lastName","setLastName","address","setAddress","name","useEffect","document","title","className","for","type","value","placeholder","onChange","e","target","handleFirstNameChange","required","onClick","setTimeout","About","contactNumber","setContactNumber","console","log","handleNumberChange","alert","App","class","to","style","color","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAEO,SAASA,IAAS,IAAD,EACYC,mBAAS,IADrB,mBACfC,EADe,KACJC,EADI,OAEUF,mBAAS,IAFnB,mBAEfG,EAFe,KAELC,EAFK,OAGQJ,mBAAS,IAHjB,mBAGfK,EAHe,KAGNC,EAHM,KAKhBC,EAAqB,QA+EZ,IA/EqB,QAgCpC,OA9BAC,qBAAU,WAMR,OAJEC,SAASC,MADE,KAATH,EACeA,EAEA,cAEZ,WACLE,SAASC,MAAQ,eAwBnB,yBAAKC,UAAU,cACb,2BAAOC,IAAI,aAAX,gBACA,2BACEC,KAAK,OACLN,KAAK,YACLO,MAAOb,EACPc,YAAY,2BACZJ,UAAU,eACVK,SAAU,SAAAC,GAAC,OA5BjB,SAA+BA,GAC7Bf,EAAae,EAAEC,OAAOJ,OA2BHK,CAAsBF,IACrCG,UAAQ,IAEV,6BAEA,2BAAOR,IAAI,YAAX,eACA,2BACEC,KAAK,OACLN,KAAK,WACLO,MAAOX,EACPY,YAAY,0BACZJ,UAAU,eACVK,SApCN,SAA8BC,GAC5Bb,EAAYa,EAAEC,OAAOJ,QAoCjBM,UAAQ,IAEV,6BAEA,2BAAOR,IAAI,WAAX,aACA,2BACEC,KAAK,OACLN,KAAK,UACLO,MAAOT,EACPU,YAAY,wBACZJ,UAAU,eACVK,SA5CN,SAA6BC,GAC3BX,EAAWW,EAAEC,OAAOJ,QA4ChBM,UAAQ,IAEV,6BACA,6BAEA,4BAAQP,KAAK,SAASF,UAAU,kBAAkBU,QA9CtD,WACEZ,SAASC,MAAQ,aACjBY,YAAW,WACTb,SAASC,MAAQT,EAAY,IAAME,IAClC,OA0CD,eC5EC,SAASoB,IAAS,IAAD,EACoBvB,qBADpB,mBACfwB,EADe,KACAC,EADA,KA2BtB,OAvBAjB,qBAAU,WAKR,OAHEiB,EA4CG,cA1CLhB,SAASC,MAAQ,QACV,WACLD,SAASC,MAAQ,cAElB,CAsCI,eAtBL,yBAAKC,UAAU,cACb,2BAAOC,IAAI,iBAAX,oBACA,2BACEC,KAAK,SACLN,KAAK,gBACLO,MAAOU,EACPT,YAAY,+BACZJ,UAAU,eACVK,SAAU,SAAAC,GAAC,OAtBjB,SAA4BA,GAC1BS,QAAQC,IAAIV,EAAEC,OAAOJ,OACrBW,EAAiBR,EAAEC,OAAOJ,OAoBPc,CAAmBX,IAClCG,UAAQ,IAEV,6BACA,6BAEA,4BAAQP,KAAK,SAASF,UAAU,kBAAkBU,QAvBtD,WACEZ,SAASC,MAAQ,aACjBY,YAAW,WACTb,SAASC,MAAQ,QACjBmB,MAAML,KACL,OAkBD,eCVSM,MA5Bf,WACE,OACE,yBAAKnB,UAAU,aACb,kBAAC,IAAD,KACE,6BACE,yBAAKoB,MAAM,8BACT,yBAAKpB,UAAU,eACb,kBAAC,IAAD,CAAMqB,GAAG,KAAT,SADF,IAC4B,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,KAA4C,IACtE,kBAAC,IAAD,CAAMF,GAAG,UAAT,WAIJ,6BAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,KAChB,kBAACrC,EAAD,OAEF,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,UAChB,kBAACb,EAAD,YCbMc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.31fd4239.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport function Hooks() {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  const name = useCustomHook(\"Robin\", \"Singh\");\r\n\r\n  useEffect(() => {\r\n    if (name !== \"\") {\r\n      document.title = name;\r\n    } else {\r\n      document.title = \"React Hooks\";\r\n    }\r\n    return () => {\r\n      document.title = \"Goodbye1\";\r\n    };\r\n  });\r\n\r\n  function handleFirstNameChange(e) {\r\n    setFirstName(e.target.value);\r\n  }\r\n\r\n  function handleLastNameChange(e) {\r\n    setLastName(e.target.value);\r\n  }\r\n\r\n  function handleAddressChange(e) {\r\n    setAddress(e.target.value);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    document.title = \"Loading...\";\r\n    setTimeout(function() {\r\n      document.title = firstName + \" \" + lastName;\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label for=\"firstName\">First Name: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"firstName\"\r\n        value={firstName}\r\n        placeholder=\"Enter First Name here...\"\r\n        className=\"form-control\"\r\n        onChange={e => handleFirstNameChange(e)}\r\n        required\r\n      />\r\n      <br />\r\n\r\n      <label for=\"lastName\">Last Name: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"lastName\"\r\n        value={lastName}\r\n        placeholder=\"Enter Last Name here...\"\r\n        className=\"form-control\"\r\n        onChange={handleLastNameChange}\r\n        required\r\n      />\r\n      <br />\r\n\r\n      <label for=\"address\">Address: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"address\"\r\n        value={address}\r\n        placeholder=\"Enter Address here...\"\r\n        className=\"form-control\"\r\n        onChange={handleAddressChange}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n\r\n      <button type=\"button\" className=\"btn btn-primary\" onClick={handleSubmit}>\r\n        ADD RECORD\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useCustomHook(fName, lName) {\r\n  return fName + \" \" + lName;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport function About() {\r\n  const [contactNumber, setContactNumber] = useState();\r\n  const number = useCustomHook();\r\n\r\n  useEffect(() => {\r\n    if (number !== null) {\r\n      setContactNumber(number);\r\n    }\r\n    document.title = \"About\";\r\n    return () => {\r\n      document.title = \"Goodbye2\";\r\n    };\r\n  }, [number]);\r\n\r\n  function handleNumberChange(e) {\r\n    console.log(e.target.value);\r\n    setContactNumber(e.target.value);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    document.title = \"Loading...\";\r\n    setTimeout(function() {\r\n      document.title = \"About\";\r\n      alert(contactNumber)\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label for=\"contactNumber\">Contact Number: </label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"contactNumber\"\r\n        value={contactNumber}\r\n        placeholder=\"Enter Contact Number here...\"\r\n        className=\"form-control\"\r\n        onChange={e => handleNumberChange(e)}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n\r\n      <button type=\"button\" className=\"btn btn-primary\" onClick={handleSubmit}>\r\n        ADD RECORD\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useCustomHook() {\r\n  return \"9876543210\";\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Link, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { Hooks } from \"./Hooks\";\r\nimport { About } from \"./About\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Router>\r\n        <div>\r\n          <nav class=\"navbar navbar-dark bg-dark\">\r\n            <div className=\"header-link\">\r\n              <Link to=\"/\">Hooks</Link> <span style={{ color: \"#ffffff\" }}>|</span>{\" \"}\r\n              <Link to=\"/about\">About</Link>\r\n            </div>\r\n          </nav>\r\n          \r\n          <hr />\r\n\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Hooks />\r\n            </Route>\r\n            <Route exact path=\"/about\">\r\n              <About />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}